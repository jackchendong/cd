1: java介绍:
  java语言的三种技术架构:
    1: J2EE(Java 2 Platform Enterprise Edition)企业版
      是为开发企业环境下的应用程序提供的一套解决方案。该技术体系中包含的技术如 Servlet Jsp等，主要针对于Web应用程序开发
    2: J2SE(Java 2 Platform Standard Edition）标准版
        是为开发普通桌面和商务应用程序提供的解决方案。
        该技术体系是其他两者的基础，可以完成一些桌面应用程序的开发。
        比如Java版的扫雷
    3：J2ME(Java 2 Platform Micro Edition)小型版
      是为开发电子消费产品和嵌入式设备提供的解决方案。
      该技术体系主要应用于小型电子消费类产品，如手机中的应用程序等。

      Java5.0版本后，更名为 JAVAEE    JAVASE    JAVAME
  java特性：一次编译，到处运行    

  JVM（java虚拟机）: 解释.class二进制文件
  JRE (Java运行环境) : 包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，
                      如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。
  JDK: java开发工具 + JRE
       安装目录介绍:
          bin:存放的是开发java程序常用的工具,java调试工具。
          include:包含c的语言程序，支持c的本地接口和java虚拟机调试程序的本地接口。
          src.zip : 源代码
          lib : 核心类库
          jre： 主要包含java程序运行需要的类
              bin：用于运行时的可执行文件
              lib：类库

          目前要用到的java开发工具：
              javac.exe : java编译器 
                        javac 文件路径 -encoding UTF-8

              java.exe : 启动java虚拟机，并执行指定的class文件
                        java  hello    // 这里不要加class, 不要加./

   JAVA_HOME: 配置jdk目录
   javaclass: 设置class文件的路径在启动java虚拟机的时候(java.exe),如果已经配置了classpath的环境变量信息，那么java虚拟机在启动的时候就会根据classpath指定的路径
		      下去搜索指定的class文件.默认当前目录下面,
              配置:   ;f:/  这个分割符在前面，就先去当前目录
                      f:/;  这个分隔符在后面，先去当前目录再去f盘
              现在不用配置classpath了,以前jdk5.0之前是要配置的因为要去找rt.jar包  jre\lib\rt.jar 核心类库

命名规则:
    1. 标识符的组成元素是 字母（a-z A-Z）,数字（0~9） 、下划线（_）、 美元符号（$）
	2. 标识符不能以数字开头。
	3. java的标示符是严格区分大小写的。
	4. 标识符的长度可以是任意。
	5. 自定义的标识符名称一般要有意义。 
	6. 关键字、保留字(goto)不能用于自定义的标识符。

关键字： 在java程序中有些标识符是有着特殊含义的，而我们就把这些有着特殊含义的标识符就称作为关键字。
        关键字一般用于表示一个程序的结构或者是数据类型。关键字不能用做类名，变量名，方法名，包名.

注释:
    单行注释:     //
    多行注释:    /*  */
    文档注释:    /**   */   一定要在方法之上和类之上,类要是公共类

    /** 
        @author
        @version
    */

    文档注释可以生成开发者文档，用到了 javadoc.exe
    javadoc.exe -d 目录  java源文件
    javadoc.exe -version -author -d 目录 java源文件

JAVA的数据类型:
    八种基本的数据类型:
        整数:
            byte(字节):  8位  2^8 = 256   范围: -128(2^7)  --- 127(2^7 -1)
            short(短整型): 16位    -32768（-2^15） --- 32767（2^15 - 1）
            int(整型):  32位 -2,147,483,648（-2^31）  --- 2,147,483,647(2^31 - 1)
            long(长整型): 64位   -9,223,372,036,854,775,808（-2^63） --- 9,223,372,036,854,775,807（2^63 -1）
            一个整数没有加上任何的表示默认就是int整型,12L 长整型
        小数:
            float(单精度浮点数): 32位bit  8个小数位  以F结尾  Float.size  可以打印大小   Float.MIN_VALUE --- Float.MAX_VALUE
                                32bit是存储空间大小，具体和还要看存储的方式。小数的存储方式不一样具体自己看。
            double(双精度浮点数): 64位    17个小数位
            一个小数默认是double.
        布尔:
            boolean: 一个字节或者4个字节(8位或32位)
                如果boolean用于声明一个基本类型变量时占4个字节；
                如果boolean用于 数组中的时候占1个字节;
        字符:
            char:   char类型是一个单一的 16 位 Unicode 字符；
                    最小值是 \u0000（即为0）；
                    最大值是 \uffff（即为65,535）；
        void : 这个也是基本的数据类型， 但是无法直接操作

    引用类型: 
        String


类型的转换:
    自动类型转换:

    强制类型转换:
        变量 = (小数据类型)  大数据类型； // 强制类型的转换舍弃前面的二进制位
        这个转换数据会变化  int i = 128; byte b = (byte) i  //-128
        负数的最高位是1，正数的最高位是0；
        负数在计算机中存储的是补码;  // 计算机中的所有整数都是以补码的形似存储的.
                                   // 正数的补码就是自己;
        补码的运算过程:
            1: 先获取负数的绝对值，然后得到绝对值的二进制(原码)
            2: 原码取反(反码)
            3: 反码 + 1 = 补码

            int   i  = 10;
            byte  b1 = i;   //错误  
            byte  b2 = 10 ; //正确
             因为:  java编译器在编译的过程中可以检测到一个常量的值，而不能检测到变量的的值，10 就是常量;
                    一个变量在java虚拟机运行到该变量语句的时候才在内存中开辟对应的空间，编译的时候并不会开辟内存空间。


    注意:
        1: byte,short,char 数据类型在运算的时候会自动转换成int类型在运算的.
        2: 两个不同的数据类型在运算的时候，结果取决于大的数据类型. 

转义字符
    \b: 退格键
    \t: tab键
    \r: 回车 把光标移动到一行的首位置上面, 覆盖之前的输出 在输出.
    \n: 换行
    注意: 如果在windows操作系统的文件需要换行，那么需要 \r\n 一起使用. \r\n 顺序不能反. 其实不用记事本打开就行了 ^-^。
        
运算符：

