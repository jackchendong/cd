命令：
    npm install //这个就会找package.json中的依赖安装，超级方便
    npm install 模块名   //安装模块
    npm install 模块名 -g  //全局安装
    npm update  模块名    //更新
    npm uninstall 模块名   //卸载
    npm init              //创建项目，并加上package.json
    npm init --yes        //一键生成
    npm install <package_name> --save     //要添加一个条目到你package.json的dependencies：
    npm uninstall mysql --save            //卸载并删除条目
    npm install <package_name> --save-dev  //要添加一个条目到你package.json的devDependencies：
    npm install npm -g                     //升级npm
    npm list mongodb          //查看mongodb的版本号
    npm -l                 //查看所有的npm命令和选项
    npm run start == npm start
    npm -S  == npm --save
    npm -D  == npm --save-dev

package.json
    Node.js在调用某个包时，会首先检查包中package.json文件的main字段，将其作为包的接口模块，如果package.json活main字段不存在，会尝试寻找index.js或index.node作为包的接口。 
    package.json是CommonJS规定的用来描述包的文件，完全符合规范的package.json文件应该含有以下字段。

    name: 包的名称，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格。
    description：包的简要说明。
    homepage - 包的官网 url 。
    version：符合语义化版本识别规范的版本
    keywords：关键字数组，通常用于搜索。
    maintainers：维护者数组，每个元素包含name、email（可选）、web（可选）字段。
    contributors：贡献者数组，格式与maintainers相同。包的作者应该是贡献者数组的第一个元素。
    licenses：许可证数组，每个元素要包含type（许可证的名称）和url（链接到许可证文本的地址）字段。
    repositories：仓库托管地址数组，每个元素要包含type（仓库的类型，如git）、url（仓库的地址）和path（相对于仓库的路径，可选）字段。
    dependencies：包的依赖，一个关联数组，由包名称和版本号组成。这些软件包是您的应用程序在生产中所需要的。
    "devDependencies"：这些软件包仅用于开发和测试。

    我的例子：
        {
            "name": "cccccccc",
            "version": "1.0.0",
            "description": "hello",
            "author": "陈冬",
            "license": "ISC",
	    "repository":{},
	    "scripts": {              //这里就是启动脚本了  可以用 npm run start  或者 npm run dev  等等
		    "start": "node bin/dice-api",
		     'start': "set NODE_ENV=aaaaa && node app.js",  //启动的同时并设置环境
		    "dev": "./node_modules/.bin/nodemon bin/dice-api",
		    "prd": "pm2 start bin/dice-api",
		    "test": "echo \"Error: no test specified\" && exit 1"
		  },
	"apidoc": {                            //apidoc配置
		    "title": "Hyper Play MANAGER API",
		    "url": ""
		  },
	 "dependencies": {
                "mysql": "^2.15.0"    //^这个表示固定。可以这样 ^2.^15.^0  固定版本
            },
	    "devDependencies": {

		 }
        }
npm发布：
    0：发布之前确定其他人没有发布相同的包名，就是package name不能有一样的。
       还要加上README.md文件
    1: npm adduser
    2: npm publish
    3: npm whoami从终端键入以确保您的凭证存储在您的客户端上。 检查是npm是否登陆
npm:撤销发布
    根据规范，只有在发包的24小时内才允许撤销发布的包
    即使你撤销了发布的包，发包的时候也不能再和被撤销的包的名称和版本重复了

    npm unpublish <package>@<version>  可以撤销发布自己发布过的某个版本代码。
    npm deprecate <pkg>[@<version>] <message>    //别人在下载的时候会得到警告

使用淘宝 NPM 镜像
    大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。
    淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。
    你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:
    $ npm install -g cnpm --registry=https://registry.npm.taobao.org
    这样就可以使用 cnpm 命令来安装模块了：
    $ cnpm install [name]

yarn:
	初始化一个新的项目
	        npm install -g yarn  //全局安装
		
		yarn init    // 创建一个新项目
		添加一个依赖包
		yarn add [package]
		yarn add [package]@[version]
		yarn add [package]@[tag]
		
		更新一个依赖包
			yarn upgrade [package]
			yarn upgrade [package]@[version]
			yarn upgrade [package]@[tag]

		安装所有依赖：yarn 或 yarn install
		安装一个包的单一版本：yarn install --flat
		强制重新下载所有包：yarn install --force
		只安装生产环境依赖：yarn install --production

	yarn remove [package]

	yarn = yarn install   //安装所有的依赖包
