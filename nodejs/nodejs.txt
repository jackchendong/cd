/***/小知识点
	1& {}对象没有length属性
        2& []和str有length属性
	3& 如果下载了服务压缩文件的话 C:>npm install 路径+解压后的文件名
	4& 在终端里面申明一个变量，敲回车后出现了一个undefined，这是因为我们只是赋值，没有任何    输出，所以系统默认打印的信息
	5& 单双引号是有区别的
	6& http请求头部里面有304也即是lastmodified，这个apache已经封装好了。
	   在原生的nodejs里面要用cookie自己写
	7& 一个JavaScript文件中的变量和函数只在这个文件的内部有效，要暴露就要用exports对象
		使用者就用require（）引用这个js文件。
	8& 一个js文件可以exports.msg=msg
					exports.info=info
					exports.function=function
					可以一直下去。
		但是接受的时候只能用一个，有点像命名空间
	9&	module.exports=People;   //这个时候暴露的是构造函数。
   

/***/nodejs中将json字符串与对象
	var obj = eval('(' + str + ')');
	var obj = str.parseJSON(); //由JSON字符串转换为JSON对象
	var obj = JSON.parse(str); //由JSON字符串转换为JSON对象
	var last=obj.toJSONString(); //将JSON对象转化为JSON字符
	var last=JSON.stringify(obj); //将JSON对象转化为JSON字符
	
	#注：var='{"name":"xiao","age":"18","sex":"1"}' //!!只有双引号在里面才可以用
	     eval()可以在浏览器里面使用

http:
	var server=http.createServer(function(req,res){
	     req.url   //返回请求的路由 , 没有锚点，其他都有。get的话
	      	     
	     res.end([字符串])	//结束请求
	     res.write();    //写东西 可以在end之前一直写
		 res.setHead();   //这个与writeHead重复。
	     res.writeHead(200,{"Content-type":"text/html;charset=UTF-8"})  //设置返回的头部
	});
	server.listen(端口，[地址，] 回调函数)
fs:
	1: fs.readFile()
		参数：
		    1: string  		//文件路径
		    2：object | string
		    	 当为string是表示encoding 可以写utf8这样就返回的是字符串
			3：function
				参数：	
			Error    //错误信息
			data	buffer|string     //读取的文件信息
	2: fs.readFileSync() 
	3: fs.mkdir(path[, mode], callback)
			path <string> | <Buffer> | <URL>
			mode <integer> Default: 0o777         #权限
			callback <Function>
				err <Error>
			异步的 mkdir(2)。 完成回调只有一个可能的异常参数。 mode 默认为 0o777。
	4: fs.stat(path, callback)
		path <string> | <Buffer> | <URL>
		callback <Function>
			err <Error>
			stats <fs.Stats>
		异步的 stat(2)。 回调有两个参数 (err, stats) 其中 stats 是一个 fs.Stats 对象。
		不建议在调用 fs.open() 、fs.readFile() 或 fs.writeFile() 之前使用 fs.stat() 检查一个文件是否存在。 作为替代，用户代码应该直接打开/读取/写入文件，当文件无效时再处理错误。
		如果要检查一个文件是否存在且不操作它，推荐使用 fs.access()。
	5: fs.Stats
		stats.isFile()
		stats.isDirectory()
		stats.isBlockDevice()
		stats.isCharacterDevice()
		stats.isSymbolicLink() (仅对 fs.lstat() 有效)
		stats.isFIFO()
		stats.isSocket()
	6: fs.readdir(path[, options], callback)   //读取文件夹的全部文件,包括文件和文件夹
	7: fs.rename(oldPath, newPath, callback)   
		oldPath <string> | <Buffer> | <URL>
		newPath <string> | <Buffer> | <URL>
		callback <Function>
			err <Error>
		//使用之前要先判断文件是否存在，否则就是替换，还可以换路径。
	    ex:
		 fs.rename(files.tupian.path,DIR+"/public/images/cd.jpg",function(err){  
                        console.log(err);
                  }) 

url:
	┌─────────────────────────────────────────────────────────────────────────────────────────────┐
	│                                            href                                             │
	├──────────┬──┬─────────────────────┬─────────────────────┬───────────────────────────┬───────┤
	│ protocol │  │        auth         │        host         │           path            │ hash  │
	│          │  │                     ├──────────────┬──────┼──────────┬────────────────┤       │
	│          │  │                     │   hostname   │ port │ pathname │     search     │       │
	│          │  │                     │              │      │          ├─┬──────────────┤       │
	│          │  │                     │              │      │          │ │    query     │       │
	"  https:   //    user   :   pass   @ sub.host.com : 8080   /p/a/t/h  ?  query=string   #hash "
	│          │  │          │          │   hostname   │ port │          │                │       │
	│          │  │          │          ├──────────────┴──────┤          │                │       │
	│ protocol │  │ username │ password │        host         │          │                │       │
	├──────────┴──┼──────────┴──────────┼─────────────────────┤          │                │       │
	│   origin    │                     │       origin        │ pathname │     search     │ hash  │
	├─────────────┴─────────────────────┴─────────────────────┴──────────┴────────────────┴───────┤
	│                                            href                                             │
	└─────────────────────────────────────────────────────────────────────────────────────────────┘

	var obj=url.parse(urlString[, parseQueryString[, slashesDenoteHost]])
		urlString <string> 要解析的 URL 字符串。
		parseQueryString <boolean> 如果为 true，则 query 属性总会通过 querystring 模块的 parse() 方法生成一个对象。 如果为 false，则返回的 URL 对象上的 query 属性会是一个未解析、未解码的字符串。 默认为 false。
		slashesDenoteHost <boolean> 如果为 true，则 // 之后至下一个 / 之前的字符串会被解析作为 host。 例如，//foo/bar 会被解析为 {host: 'foo', pathname: '/bar'} 而不是 {pathname: '//foo/bar'}。 默认为 false。

		ex：
			var query=url.parse(urlstring,true).query;   //将query部分以obj返回

querystring:
	查询字符串
	1:  var str=querystring.escape(str)          //对给定的url进行编码,返回编码后的字符串。
	2:  var str=querystring.unescape(str)                //对给定的url进行解码。
			该方法是提供给 querystring.parse() 使用的，通常不直接使用。 它之所以对外开放，是为了在需要时可以通过给 querystring.unescape 赋值一个函数来重写解码的实现。
            默认使用 JavaScript 内置的 decodeURIComponent() 方法来解码。
	3:  querystring.parse(str[, sep[, eq[, options]]])
				str <string> 要解析的 URL 查询字符串。
				sep <string> 用于界定查询字符串中的键值对的子字符串。默认为 '&'。
				eq <string> 用于界定查询字符串中的键与值的子字符串。默认为 '='。
				options <Object>
					decodeURIComponent <Function> 解码查询字符串的字符时使用的函数。默认为 querystring.unescape()。
					maxKeys <number> 指定要解析的键的最大数量。默认为 1000。指定为 0 则不限制。
					该方法会把一个 URL 查询字符串 str 解析成一个键值对的集合。

				例子，查询字符串 'foo=bar&abc=xyz&abc=123' 被解析成：

				{
				foo: 'bar',
				abc: ['xyz', '123']
				}
				默认情况下，查询字符串中的字符会被视为使用 UTF-8 编码。 如果使用的是其他字符编码，则需要指定 decodeURIComponent 选项，例如：
					// 假设存在 gbkDecodeURIComponent 函数。
					querystring.parse('w=%D6%D0%CE%C4&foo=bar', null, null,{ decodeURIComponent: gbkDecodeURIComponent });
	4:  querystring.stringify(obj[, sep[, eq[, options]]])     //如果obj的属性值不是string、boolean和number中的一种，它就不能序列化,默认为空
				obj <Object> 要序列化成 URL 查询字符串的对象。
				sep <string> 用于界定查询字符串中的键值对的子字符串。默认为 '&'。
				eq <string> 用于界定查询字符串中的键与值的子字符串。默认为 '='。
				options
					encodeURIComponent <Function> 把对象中的字符转换成查询字符串时使用的函数。默认为 querystring.escape()。
				ex:
					querystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' });
					// 返回 'foo=bar&baz=qux&baz=quux&corge='

					querystring.stringify({ foo: 'bar', baz: 'qux' }, ';', ':');
					// 返回 'foo:bar;baz:qux'

					默认情况下，使用 UTF-8 进行编码。 如果需要使用其他编码，则需要指定 encodeURIComponent 选项，例如：
					// 假设存在 gbkEncodeURIComponent 函数。
						querystring.stringify({ w: '中文', foo: 'bar' }, null, null,{ encodeURIComponent: gbkEncodeURIComponent });

path:
	1: str = path.extname(path);
		path.extname() 方法返回 path 的扩展名，即从 path 的最后一部分中的最后一个 .（句号）字符到字符串结束。
		 如果 path 的最后一部分没有 . 或 path 的文件名（见 path.basename()）的第一个字符是 .，则返回一个空字符串。
	2: str=path.normalize(path)

	ex:		
		path.extname('index.html');
		// 返回: '.html'

		path.extname('index.coffee.md');
		// 返回: '.md'

		path.extname('index.');
		// 返回: '.'

		path.extname('index');
		// 返回: ''

		path.extname('.index');
		// 返回: ''

		path.normalize('/foo/bar//baz/asdf/quux/..');
		// 返回: '/foo/bar/baz/asdf'

		path.normalize('C:\\temp\\\\foo\\bar\\..\\');
		// 返回: 'C:\\temp\\foo\\'


module:
	这个是Node.js的模块加载系统,这些只在模块内部。
	1:  __dirname   //当前模块的路径，文件夹
	2： __filename  //当前模块的文件路径
	3：exports       //暴露类 ,这个是快捷方式
	4：require()     //引入模块
		require('01.js')   //默认去node_modules去找01.js
		require('bar')     //去node_modules中找bar文件夹，文件夹中有index.js
							//或是在pakage.JSON文件中指定入口js
		require('./02.js')  //去找相对路径的文件

		这个时候node_modules文件可以在父级目录里面，或是在环境变量里面	

	5：module        //这个对象不是全局的，是每个模块本地

global:
	这个是nodejs的全局变量。
	比如定时器，console，process,buffer
	而module里面的都是模块内部的。
	ex:
		console.log(global.process)   //这个打印了了process信息
		console.log(process)          //因为是globale所以不加global也可以直接打印
定时器：
	1：setImmediate(callback[, ...args])
		callback <Function> 在 Node.js 事件循环的当前回合结束时要调用的函数。
		...args <any> 当调用 callback 时要传入的可选参数。

		预定立即执行的 callback，它是在 I/O 事件的回调之后被触发。 
		返回一个用于 clearImmediate() 的 Immediate。

	2: setInterval(callback, delay[, ...args])
			callback <Function> 当定时器到点时要调用的函数。
			delay <number> 调用 callback 之前要等待的毫秒数。
			...args <any> 当调用 callback 时要传入的可选参数。
		预定每隔 delay 毫秒重复执行的 callback。 返回一个用于 clearInterval() 的 Timeout。
		当 delay 大于 2147483647 或小于 1 时，delay 会被设为 1。	
	3:setTimeout(callback, delay[, ...args])
			callback <Function> 当定时器到点时要调用的函数。
			delay <number> 调用 callback 之前要等待的毫秒数。
			...args <any> 当调用 callback 时要传入的可选参数。
		预定在 delay 毫秒之后执行的单次 callback。 返回一个用于 clearTimeout() 的 Timeout。
	4:取消
		clearImmediate(immediate)
		clearInterval(timeout)
		clearTimeout(timeout)



第三方模块：

formidable:  //图片上传用   这个能支持很多。
    var form = new formidable.IncomingForm();
        form.uploadDir = DIR+"/public/images/";  //设置文件上传路径
        form.keepExtensions = true;              //是否保留文件拓展名
        form.multiples = true;			 //是否支持多个文件
        form.parse(req, function(err, fields, files) {
                    //console.log(fields);
                    //console.log(files);
                    //files.tupian.name  这个是图片的原名字
                    //files.tupian.path  这个是上传的默认文件路径
                    fs.rename(files.tupian.path,DIR+"/public/images/cd.jpg",function(err){  //使用之前要先判断文件是否存在，否则就是替换
                        console.log(err);
                    }) 
        });

        form.on('progress', function(bytesReceived, bytesExpected) {  //这个是文件上传的速度
            console.log(bytesReceived/bytesExpected);
        });
	form.on('end', function() {   //上传完
	});

ua-parser-js：看浏览器类型，系统类型。。。

	var parser = require('ua-parser-js');
	var ua = parser(req.headers['user-agent']);
		//ua是一个对象，里面就有很多
		 { ua: '', 
		   browser: {}, 
		   cpu: {}, 
		   device: {}, 
		   engine: {}, 
		   os: {} 
		  }
		
express:
    var express=require('express');   
	var app=express();
	app.listen(80,function(){
		console.log("服务启动");
	});
	app.use([path,] function [, function...]);   //能匹配子路由，所有的子路由都能匹配到
		ex：
			app.use('/admin', function(req, res, next) {
				// GET 'http://www.example.com/admin/new'
				console.log(req.originalUrl); // '/admin/new'
				console.log(req.baseUrl); // '/admin'
				console.log(req.path); // '/new'
				next();
			});

	app.set();
	app.get('./route',function(req,res,next){
		//req.query  //得到参数。。。。  post请求没有
		//res.end(),与next不能连用。只能用一次
		//res.send();   //也只能用一次
        //res.redirect("/login");  //重定向
	});	
	app.post('./route',function(req,res,next){

	});
	app.get(/^\/student\/([\d]{10})$/,function(req,res,next){   //这个路由可以是正则，加()是为了后面的params
			res.end("学生信息为"+req.params[0])

	})
	app.get("/teacher/:gonghao",function(req,res){   //这个是express自带的。看好gonghao下面要用的
		res.end("老师的信息"+req.params.gonghao)
		res.end("老师的信息"+req.params["gonghao"]);
	})
	app.get("/:username/:id",function(req,res){   //这个可以这样用。所有路由要分好。
		var username=req.params["username"];
		var id=req.params["id"];

	})
	app.all("/",function(req,res){   //处理路由的所有请求。所有的类型的请求get post delete

	})
	//express搭建静态服务
	var express = require("express");
	var app=express();
	app.use(express.static("./public"));    //提供静态服务.
	app.listen(80);

ejs:
	配合express使用。
	var express=require("express");
	var app=express();
	app.set("view engine","ejs");    //安装之后可以不用require("ejs"),这个express自己会去找
	app.get("/",function(req,res){
		res.render("haha.ejs",{                //renders,默认是在views文件夹中
			"news":["linwei","cd"]
		})
	})

pm2:
	npm install pm2 -g   //全局安装。就可以使用pm2命令了。目录自己找。不是二进制文件，是cmd和js
	1：启动服务
		pm2 start app.js   //通过pm2直接启动服务
		pm2 start app.js --name NAME  //启动服务并取一个名字
		pm2 start config.json  //通过json配置文件启动，配置文件的改变重启要先删除pm2 delete 之后在启动才能生效。好像是的
		config.json
			{
			  "script"          : "./app.js",
			  "watch"	    : true, 
			  "instances"       :  4,    //开启4个实例
			  "ignore_watch" : ["node_modules", "log","config","upload" ,"public","views"],
			  "watch_options": {
			    "followSymlinks": false
			  },
			  "error_file"      : "./log/combined.log",   
			  "out_file"        : "./log/combined.log",
			  "merge_logs"      : true,
			  "log_date_format" : "YYYY-MM-DD HH:mm Z"
			}
				
		pm2 start config.yml    //通过yml配置文件启动服务
			apps:
			  - script   : app.js
			    instances: 4
			    exec_mode: cluster
			  - script : worker.js
			    watch  : true
			    env    :
			      NODE_ENV: development
			    env_production:
			      NODE_ENV: production

		pm2 resurrect       //恢复先前保存的进程   
		pm2 flush           //清洗所有的数据[注：我没有试出来效果]

	2：
		pm2 stop app.js --watch 0   //停止服务，并取消监听文件的change事件
		pm2 delete app.js           //删除服务

	3：
		pm2 list      //查看所有的应用

	4：	pm2 logs      //查看日志，在控制台。
	        pm2 start app.js -i 3   # 开启三个进程
	        pm2 start app.js -i max   # 根据机器CPU核数，开启对应数目的进程 

Sequelize:
	1:模型创建，对数据的操作都建立在模型的基础上
	const Sequelize = require('sequelize');
	const sequelize  = new Sequelize(database,username,password,{
	    host:host,
	    dialect:'mysql',
	    port:"",
	});

	const User = sequelize.define('userinfo',{
		id: {
		   type: Sequelize.STRING(50),
		    primaryKey: true//主键
		},
	    username: Sequelize.STRING,//用户名
	    password: Sequelize.STRING,//密码 字符串
	    role: Sequelize.INTEGER,//权限 整数
	},{freezeTableName: true,timestamps: false});//timestamp字段表示数据库中是否会自动更新createdAt和updatedAt字段，false表示不会增加这个字段。
						  //freezeTableName为false表示该模型对应的表明就为userinfo表，默认时为true，对应表名为userinfos
	2:增加数据
	User.create({username, password, role})//username role password对应相应的字段名
              .then(ok => res.json({status: 'ok'}))
              .catch(e => res.json({status: 'error', message: e}));//异常捕获
	3:删除数据
	User.destroy({where: {username}})//where是指定查询条件
        .then(ok =>console.log('ok'))//删除成功的回调
        .catch(e => res.json({status: 'error', message: e}));
	
	4:数据查询
	User .findOne({//还有find、findAll等方法 
	where: { 
	username: username//查询条件 
	} 
	}).then(result=>{ 
	console.log(result)//空时为null 
	}) 

	User.findAll({
	  attributes: [[sequelize.fn('DISTINCT', sequelize.col('username')), 'aaa']],  //SELECT DISTINCT(`username`) AS `username` FROM `users` AS `user`
	}).then(result=>{
	  console.log(result) 
	})
       //升序，降序
	User.findAll({ 
	     order:[['birthday','DESC']]    //降序  ASC升序
	}).then(result=>{
	     console.log(result)
	}
	//分页
	User.findAll({
	     offset:10,   //分页
	      limit:3
	}).then(result=>{
	  console.log(result)
	  
	})

	//alias别名的使用
	UserMode.findAll({
		attributes:['id',['created_at','createdAt']]   //查询后的别名
	})


	//include的使用
	UserModel,
	CoinMode,
	User.belongsTo(CoinMode,{foreignKey:"coin_id"})   //关联这样在用user查询的时候就会带上coin信息
	UserModel.findAll({
		include:[{model:CoinMode,attributes:['coinId','created_at']}]   //查询之后带上的消息
	})

bcrypt：加密比MD5安全
	const bcrypt = require('bcrypt')
	const saltRounds = 10;
	const myPlaintextPassword ="admin";
	var salt = bcrypt.genSaltSync(saltRounds);
	var hash = bcrypt.hashSync(myPlaintextPassword, salt);
	console.log(hash)
	var a = bcrypt.compareSync("admin", "$2a$10$LT8EU3/YDsko7mGJFygVdOwh8.wOCVOL0ySXRcYktXalQ1Giy0fnq");
	console.log(a)