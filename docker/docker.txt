命令: 
    docker -v 查看版本
    docker login 登录
    docker pull (镜像名字) 获取镜像

    docker images 查看本机的所有镜像
    docker image prune  // 清理image

    docker container prune // 清理容器
    docker save -o ubuntu_test1.tar ubuntu_test1:1.0  打包镜像并查看

    docker run -it -d --name test 
    docker run -d IMAGE_ID sleep infinity 启动镜像 后台运行-d
    docker run ubuntu /bin/echo 'Hello world'  ---Hello world
    sudo docker run -t -i ubuntu(或者镜像id) /bin/bash  交互式 -t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开
    docker run -it -v  D:/project:/data IMAGE_ID /bin/bash // 挂宅磁盘
    docker run -ti ubuntu bash  运行ubuntu并进入bash
    正确退出系统方式： 这种方式启动就要这样退出,绝对不能使用exit或者ctrl+d来退出，这样整个系统就退出了
    先按，ctrl+p
    再按，ctrl+q

    docker ps 查看容器状态
    docker ps -a     查找到该CONTAINER ID对应编号 历史记录也有

    docker exec -it 容器ID /bin/bash 

    docker stop ID 停止
    docker stop CONTAIN_ID 停止容器

    docker commit 98 ubuntu_test1:1.0 制作docker镜像
    docker commit -m '增加ssh' //先增镜像 如果镜像里面加了什么东西就提交镜像，这样就可以run 这个镜像了
    
    docker logs CONTAIN_ID 查看日志

    docker attach CONTAIN_ID  进入系统（此时没反应，ctrl+c就进入到ubuntu系统中去了）

    docker inspect CONTAIN_ID  //查看镜像的参数

docker 命令:
    login: 可以登录多个仓库
        $HOME/.docker/config.json  // 配置文件所在的位置

          docker login [OPTIONS] [SERVER]
          -p, --password string   Password
          --password-stdin    Take the password from stdin
          -u, --username string   Username
	docker login -u root [仓库地址]
    logout:
        docker logout [SERVER]
        ex: docker logout localhost:8080

    commit：
        docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
        -a :提交的镜像作者；
        -c :使用Dockerfile指令来创建镜像；
        -m :提交时的说明文字；
        -p :在commit时，将容器暂停。    

        ex:
             docker commit -a "runoob.com" -m "my apache" a404c6c174a2  mymysql:v1   //这里mymusql是仓库 v1是tag标签
             docker images mymysql:v1
             REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
             mymysql             v1                  37af1236adef        15 seconds ago      329 MB

    start:
        docker start [OPTIONS] CONTAINER [CONTAINER...]
        Options:
            -a, --attach               Attach STDOUT/STDERR and forward signals
                --detach-keys string   Override the key sequence for detaching
                                        a container
            -i, --interactive          Attach container's STDIN
        
    stop:
        docker stop [OPTIONS] CONTAINER [CONTAINER...]
        Options:
            -t, --time int   Seconds to wait for stop before killing it
                            (default 10)


    run:
        ex: 
            docker run -ti -p 3000:3000 -p 22:22 -e ENV=PRO --name test fiskzeroun.faceunity.com:5000/p2a-mq:v1.9.1 bash

	    docker run --restart unless-stopped --log-driver json-file --log-opt max-size=10m --log-opt max-file=3 -e ENV=PRO -d -p 8081:8081 --name user-center fiskzeroun.faceunity.com:5000/user-center:v1.0.0
    kill:
        docker kill [OPTIONS] CONTAINER [CONTAINER...]
        -s :向容器发送一个信号
        ex:
                docker kill CONTAIN_ID  //杀掉容器
                docker kill -s KILL mynginx // 杀掉容器里面的mynginx
    
    stop:
        docker stop $(docker ps -a -q) // 停止所有的container
    
    rm:
        docker rm $(docker ps -a -q) // 删除所有的container
        docker rm container -f  // 强制删除

    rmi:
        docker rmi <image id>  //通过image的id来指定删除谁
        docker rmi $(docker images -q) // 删除所有的images
        docker rmi $(docker images | grep "^<none>" | awk "{print $3}")  // 想要删除untagged images，也就是那些id为<None>的image的话可以用
    
    container: 
        docker container COMMAND
        Commands:
            attach      Attach local standard input, output, and error streams to a running container
            commit      Create a new image from a container's changes
            cp          Copy files/folders between a container and the local filesystem
            create      Create a new container
            diff        Inspect changes to files or directories on a container's filesystem
            exec        Run a command in a running container
            export      Export a container's filesystem as a tar archive
            inspect     Display detailed information on one or more containers
            kill        Kill one or more running containers
            logs        Fetch the logs of a container
            ls          List containers
            pause       Pause all processes within one or more containers
            port        List port mappings or a specific mapping for the container
            prune       Remove all stopped containers
            rename      Rename a container
            restart     Restart one or more containers
            rm          Remove one or more containers
            run         Run a command in a new container
            start       Start one or more stopped containers
            stats       Display a live stream of container(s) resource usage statistics
            stop        Stop one or more running containers
            top         Display the running processes of a container
            unpause     Unpause all processes within one or more containers
            update      Update configuration of one or more containers
            wait        Block until one or more containers stop, then print their exit codes

    images:
        docker images [OPTIONS] [REPOSITORY[:TAG]]
        Options:
            -a, --all             Show all images (default hides intermediate
                                    images)
                --digests         Show digests
            -f, --filter filter   Filter output based on conditions provided
                --format string   Pretty-print images using a Go template
                --no-trunc        Don't truncate output
            -q, --quiet           Only show numeric IDs

    pull:
        docker pull [OPTIONS] NAME[:TAG|@DIGEST]
        docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]
        Options:
        -a, --all-tags                Download all tagged images in the
                                        repository
        --disable-content-trust   Skip image verification (default true)
        ex:
            docker pull hello-world // 默认拉取最新的

    push:
        docker push [OPTIONS] NAME[:TAG]
        Options:
            --disable-content-trust   Skip image signing (default true)

        ex: docker push registry-host:5000/myadmin/rhel-httpd
    
    top:
        docker top CONTAINER [ps OPTIONS]
        ex:
           docker top f34asd445

    save:  
        docker save [OPTIONS] IMAGE [IMAGE...]
        ex: docker save ubuntu:latest | gzip > ubuntu18.04.tar.gz
    
    load: 重新导入
        docker load [OPTIONS]
        ex: 
            Options:
                -i, --input string   Read from tar archive file, instead of STDIN
                -q, --quiet          Suppress the load output
        ex: 
            docker load -i ubuntu18.04.tar.gz
        

    logs:
        docker logs [OPTIONS] CONTAINER
        Options:
                --details        Show extra details provided to logs
            -f, --follow         Follow log output
                --since string   Show logs since timestamp (e.g.
                                2013-01-02T13:23:37) or relative (e.g. 42m
                                for 42 minutes)
                --tail string    Number of lines to show from the end of the
                                logs (default "all")
            -t, --timestamps     Show timestamps
                --until string   Show logs before a timestamp (e.g.
                                2013-01-02T13:23:37) or relative (e.g. 42m
                                for 42 minutes)
            ex:
                docker logs -f CONTAIN_ID --tail=200 |grep p2a

推送本地镜像到远程:
   1: docker tag local-image:tagname new-repo:tagname  // 把本地镜像的名字换掉，生成一个新的
   2: docker push new-repo:tagname // push到远程仓库

ubuntu 
    apt update  // ubuntu包管理器更新
    apt install ssh // 安装ssh
    service sshd status // 查看服务状态
    service ssh start  // 服务启动

配置文件:
    /etc/docker/daemon.json  // 信任 镜像地址
    {
        "registry-mirrors": [
            "https://registry.docker-cn.com"
        ],
        "insecure-registries" : ["192.168.0.35:5000","47.98.223.238:5000","fiskzeroun.faceunity.com:5000", "fiskzeroun.faceunity.com:4000"]
    }


    /root/.docker/config.json  // 登录的仓库
    {
        "auths": {
                "fiskzeroun.faceunity.com:5000": {
                        "auth": "ZmFjZXVuaXR5OmFIRFFiNlh5aio="
                },
                "https://index.docker.io/v1/": {
                        "auth": "ZG9uZ3dpbnRlcm1lbG9uOjIwMDYxMDAxMDM="
                }
        },
        "HttpHeaders": {
                "User-Agent": "Docker-Client/18.09.3 (linux)"
        }
}



docker 登录别人登录别人搭建的远程
1: 配置安全仓库	
	   /etc/docker/daemon.json
	   	{ "insecure-registries" : ["122.224.254.235:5000","fiskzeroun.faceunity.com:5000"] }
2: service docker restart 生效

3: 服务器信任 系统添加跟证书信任 // ubuntu系统上如何添加新的根证书
	/usr/local/share/ca-certificates 目录 将crt文件放在这个目录下面
4: $sudo update-ca-certificates  
	update-ca-certificates命令将PEM格式的根证书内容附加到/etc/ssl/certs/ca-certificates.crt ，而/etc/ssl/certs/ca-certificates.crt 包含了系统自带的各种可信根证书.
删除证书：
$sudo rm -f /usr/local/share/ca-certificates/证书名称.crt
$sudo update-ca-certificates
	