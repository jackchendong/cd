    0：可视化工具robomongo
        
    1：登陆
        mongo ip:27017/lj_node -u root -p 437612langjie --authenticationDatabase "admin"   //登陆,admin是认证的仓库，lj_node 是指定表
        //root用户一般只能操作admin库，去其他的库要用其他用户认证,看配置
        db.auth("root","437612langjie")             //认证 ，指定表之后如果在其他仓库的话就需要再次认证。
    2: 创建角色
        用户概念:
            Mongodb的用户是由 用户名+所属库名组成
            例如:
                登录mongo  testdb1 ，创建用户testuser
                登录mongo  testdb2 ，创建用户testuser
                那上面创建的用户分别是：testuser@testdb1，testuser@testdb2
                也就是说在哪个库下面创建用户，这个用户就是哪个库的
        > use admin
        > db.createUser({user: "root", pwd: "123456", roles:["root"]})   创建超级用户
        > db.system.users.find()                     //查看有多少角色,和角色权限
        > db.createUser({user:"master",pwd:"123456",roles:[{"role":"userAdminAnyDatabase","db":"admin"}]})  
        > db.createUser({user:"admin",pwd:"admin",roles:[{"role":"userAdminAnyDatabase","db":"admin"},{"role":"readWrite","db":"test"}]})

        读写权限：                
            read/readWrite 读写库的权限
        数据库管理角色：    
            dbAdmin  某数据库管理权限
            userAdmin  某数据库用户的管理权限，包括创建用户，授权的管理
            dbOwner     某数据库的所有者，拥有该库的所有权限，包括readWrite，dbAdmin和userAdmin权限
        集群权限   ：
        备份和恢复角色：    
            bakcup  
            restore
        所有数据库角色：    
            readAnyDatabase
            readWriteAnyDatabase
            dbAdminAnyDatabase
            userAdminAnyDatabase
        超级用户角色：        root    //什么都能做。
    3:删除角色
        要先去角色的库再删除角色
        > use testDB
            switched to db testDB
        > db.dropUser('test')
             true
    4：更新用户角色的密码和权限
        db.updateUser([用户名],{用户对象, 与创建时一样})
        db.updateUser('test',{user:'test',pwd:'admin',roles:[{role:'read',db:'testDB'}]})  //修改密码 并且 //修改角色为只读
    5:查
        db            //查看当前的所在位置
        show dbs      //查看有多少数据库
        show collections   //查看有多少表

mongodb的使用:
        SQL术语/概念	MongoDB术语/概念	解释/说明
        database	   database	        数据库
        table	          collection	     数据库表/集合
        row	            document	      数据记录行/文档
        column	             field	     数据字段/域
        index	             index	          索引
        table                joins	 	表连接,MongoDB不支持
        primary key	     primary key	主键,MongoDB自动将_id字段设置为主键

	0：增
	    use database_name  //使用数据库,没有则创建，但是不是真正意义上的创建，里面有数据才显示
	    db.createCollection("emp")  //创建集合也就是表
	    db.createCollection("emp",{capped:true,size:10000}) //创建指定大小的集合表  capped -- 能添加新对象
	    db.emp.insert({....})  //没有emp集合就创建并 插入新的数据  -- 一般这样用
	    db.emp.insert( [{...},{...}] )  //一次性插入多条数据用数组
	    db.emp.save({"...."})  //不指定_id  就是插入 指定_id 就是改


	1：查询   
		                      db    查询当前所在的数据库
		show Databases  == show dbs 查询所有的数据库
	      show collections  == show tables  查询所有的集合 
		      db.emp.find({})  //查询emp 集合的所有的内容
		      db.emp.findOne()   //查询第一条数据
                注意：mongodb对数值的字符串，和数值类型有严格的区分  字符串也可以比较大小
            基本语法：
	             db.集合名称.find({查询条件},{显示的字段});  
			     //后面的显示的字段可以省略 ，默认全部显示，
			     //显示的字段的格式 {"_id":0/1，"name":0/1} 0 表示不显示 1 表示显示
                     db.集合名称.find().pretty()  
		             //格式化显示，就是好看 ，在列多的时候就不再一行显示的就是一个对象一个对象的显示

		
      条件操作符：
	(>) 大于 - $gt
	(<) 小于 - $lt
	(>=) 大于等于 - $gte
	(<= ) 小于等于 - $lte
         =     等于    {k:v}或 $eq
         ex ： db.student.find(   {   "age":   {  "$gt":19  }    }    );  //查询年龄大于19岁的学生
               db.student.find(   {   "age":   {  "$gt":19 ,"$lt":21 }    }    );  //查询年龄大于19,小于20岁的学生
       逻辑运算：
            与  $and       
            或  $or
            非  $nor
           ex : db.student.find({"$or":[
                       {"age":{"$gt":19}},
                        {"score":{"$lt":90}}
                                           ]})    //查询age大于19  或则  分数 小于90 的学生
           ex : db.student.find({"$nor":[                          //看清楚了是$nor
			{"age":{"$gt":19}},
			{"score":{"$lt":90}}
                                           ]})    //查询age大于19  或则  分数 小于90 的学生
        求模运算
               语法 : {"$mod":[20,1]}  // 模20余1的数字
                ex : db.student.find(  {"age":{"$mod":[20,1]  }    }   )  //查询模20余1 的学生

        范围查询： $in   $nin
         ex: db.stu.find({  "name": { $in :[ "张三", "李四"  ,"王五"  ] } })   //查询名字为张三李四王五的人
             db.stu.find({$or:[
                     {name:"张三"},
                     {name:"李四"}
                    ]})

        数组查询  $all  $size $slice  $elemMatch
          ex: db.stu.find({   "course": { $all : ["语文","数学"]   } });   //查询学生中课程包含语文和数学的学生  --  course 是数组   
              db.stu.find(  { "addr" :{ $all : [ "浙江杭州" ] } }  )   //这样也行  //addr 可不是数组
                     利用index下表从0开始
	      db.stu.find( { "course.1" :  " 数学 "} )   //查询course数组中第二个是数学的人
              db.stu.find( { "course" : {  $size : 2 }   }  )    // 查询数组长度为2的人
              db.stu.find( {"age" : 19}  ,  {  course : { $slice  :  2 }  }  )  //只打印数组前两个的信息  可以是 -2  取后两个的信息
	      db.stu.find (  {"age" : 19 } , {course : {$slice  : [ 1, 2 ] } } )  //取中间的信息  -- 含头不含尾
      嵌套集合查询   
		parents  是数组  数组里面是对象 里面有 Job
                db.stu.find(    { parents : { $elemMatch : {  job  :  "局长" }  }  }   )  //查询学生父母中有是局长的  
                         注意 ： 别弄复杂的数据
      字段的判断： $exists  
          ex: db.stu.find( { "course" :  { $exists : true } }  )   //查询含有course字段的数据
              db.stu.find ( { "course" : { $exists : false  } } )   //查询不含有course 字段的数据



      where条件过滤  -- 不建议用 索引不起作用  但能支持js语法
             ex: db.stu.find( {$where : "this.age>20 " } )   //查询age 大于20的学生
                 db.stu.find("this.age>20")   //简化版
                 db.stu.find($where:function(){
				return this.age>20
				})
                 db.stu.find (function(){
			return this.age>20;
			})
      模糊查询 -- 正则运算
             基础语法 : {key : 正则标记}
             完整语法 : {  key : { $regex : 正则标记  , $options : 选项 }   }
	 options  i:忽略大小写
		  m : 多行查找
		  x :  空白字符串除了被转移的或在字符内中以外的完全被忽略
                  s : 匹配所有的字符（ .）包括换行
	  注意 如果直接使用则只能使用 i   和M  想用其他的就要用 $regex
            ex： db.stu.find( {"name" : / 陈 / } )  //查询名字包含陈的 学生
                 db.stu.find(  {"name" : / a / i } )   //忽略大小写 i 对中文肯定是无效的
                 db.stu.find( {name : { $regex : / a /i  }  } )
     数据排序  1升序  -1降序
	        ex:  db.stu.find().sort( { "score" : -1 } )  //查询分数并降序排列
     自然排序 -- 先后顺序
                ex : db.stu.find().sort( {" $natural " : -1} )   //从后往前排
     数据分页显示
                 skip ( n )  : 表示跨过多少数据
                 limit( n ) : 取出的数据个数限制
	  ex : db.stu.find().skip(0).limit(5) //取出前5个
	       db.stu.find().skip(0).limit(5).count() // 返回没有分页的数据个数
	       db.stu.find().skip(0).limit(5).count(true)  // 返回分页之后的数据也就是 当前的数据个数
               db.stu.find().skip(0).limit(5).sort( { "age" : -1 } )  
               db.stu.find().skip(5).limit(5).sort( {"age " : -1 } )
    聚合查询:
        db.emp.aggregate([{$group:{_id:"$name" , numtotal :{$sum: 1}}}])  // 查询之后 算总数
            { "_id" : "王金鹏", "numtotal" : 1 }
            { "_id" : null, "numtotal" : 3 }
            { "_id" : "王金亮", "numtotal" : 1 }
            { "_id" : "陈冬", "numtotal" : 1 }
        类似sql:
            select name, count(*) from mycol group by name
    管道查询： 

        $project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。挑选字段
        $match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。
        $limit：用来限制MongoDB聚合管道返回的文档数。
        $skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。
        $unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。
        $group：将集合中的文档分组，可用于统计结果。
        $sort：将输入文档排序后输出。
        $geoNear：输出接近某一地理位置的有序文档。

         db.emp.aggregate([{$group:{_id:"$name" , numtotal :{$sum: 1}}},{$match:{numtotal:{"$gt":1}}}])   // 查询之后 算总数 再 算聚合之后大于 1 的数据
                { "_id" : null, "numtotal" : 3 }
            类似sql:
                select name, count(*) from mycol group by name having count > 1


         db.emp.aggregate([{$group:{_id:"$name" , numtotal :{$sum: 1}}},{$match:{numtotal:{"$gt":1}}},{"$project":{"_id":0}}])   // 查询之后 算总数 再 算聚合之后大于 1 的数据 在判断显示哪个数据
            { "numtotal" : 3 }
            类似sql:
                select  count(*) from mycol group by name having count > 1

        $type 操作符:
            类型	数字	备注
            Double	1	 
            String	2	 
            Object	3	 
            Array	4	 
            Binary data	5	 
            Undefined	6	已废弃。
            Object id	7	 
            Boolean	8	 
            Date	9	 
            Null	10	 
            Regular Expression	11	 
            JavaScript	13	 
            Symbol	14	 
            JavaScript (with scope)	15	 
            32-bit integer	16	 
            Timestamp	17	 
            64-bit integer	18	 
            Min key	255	Query with -1.
            Max key	127	 

            db.emp.find({"age":{$type:2}}) 或
            db.emp.find({"age":{$type:"string"}})  //查询age是字符串的数据
                { "_id" : ObjectId("5bc5428843be0299a62e6481"), "name" : "王金亮", "age" : "18" }
            db.emp.find({"age":{$type:"number"}})  // 查询age是number的数据
               { "_id" : ObjectId("5bc543e743be0299a62e6482"), "age" : 19 }

        联表查询:
            $lookup
                from：需要关联的表 stu
                localField: emp 表需要关联的键。
                foreignField：stu 中的键
                as : 取别名
            最后得到的别名数据是数组,这个时候可以在聚合
            db.emp.aggregate([ {$lookup:{from:"stu","localField":"name", foreignField:"name",as:"aa"}} ])
                { "_id" : ObjectId("5bc5423e43be0299a62e6480"), "name" : "陈冬", "aa" : [ ] }
                { "_id" : ObjectId("5bc5428843be0299a62e6481"), "name" : "王金亮", "age" : "18", "aa" : [ { "_id" : ObjectId("5bc55be743be0299a62e6487"), "name" : "王金亮", "addr" : "浙江杭州" } ] }
                { "_id" : ObjectId("5bc543e743be0299a62e6482"), "age" : 19, "aa" : [ ] }
                { "_id" : ObjectId("5bc5471d43be0299a62e6483"), "name" : "王金鹏", "course" : [ "语文", "数学" ], "aa" : [ ] }
                { "_id" : ObjectId("5bc5482043be0299a62e6484"), "parents" : [ { "name" : "父亲", "job" : "局长" } ], "aa" : [ ] }
                { "_id" : ObjectId("5bc548b943be0299a62e6485"), "parents" : [ { "name" : "母亲", "job" : "医生" } ], "aa" : [ ] }

        ObjectId: 对象
            ObjectId 是一个12字节 BSON 类型数据，有以下格式：
            前4个字节表示时间戳
            接下来的3个字节是机器标识码
            紧接的两个字节由进程id组成（PID）
            最后三个字节是随机数。
            
              ObjectId("5349b4ddd2781d08c09890f4").getTimestamp()  //获得时间对象
                ISODate("2014-04-12T21:49:17Z")
            ObjectId("5349b4ddd2781d08c09890f4").str  // huode GUID格式字符
                5349b4ddd2781d08c09890f4
    2 : 
       数据的更新   -- 比较麻烦 建议 删掉重新插入 $set  -- 更新操作符
       语法: db.集合.update(更新条件 , 新的对象数据 ， upsert , multi )
             upsert : 如果更新的数据不存在就增加 ( true  , false) 
              multi : 是否只更新第一条数据  (true : 全更新, false : 第一条)
                 ex : db.stu.update (  {age : 19}  ,  {  "$set" : {  "score" :  100  } }   ,false  , true )  //修改器 -- 像$set 一样
               $inc :主要针对于一个数字字段，增加某个字段段落的数据内容；
                  语法： { $inc : {  "成员" : 内容  }  }  
                   ex : db.stu.update (  { "age" : 19 } , { $inc  : {score : -30 ,age : +1}} , false  , true)  //分数-30 age +1岁
               $set:进行内容的重新设置；
                 语法： {$set : {"成员" : "新内容" } }
                   ex: db.stu.update ( {"age":20} , {$set : {score : 89}}  , fasle  ,true)    //修改分数为89 
               $unset : 删除某个成员的内容；
                  语法：{ $unset :{"成员" : 1}  }  
                    ex: db.stu.update({"name":"张三"} , {$unset : { score : 1 ,  age: 1  } }) //删除字段score和age
               $push: 相当于将内容追加到指定的成员之中 ( 基本上是数组 )  -- 只能增加一个 若是写两个就是数组里面套数组
                  语法: { $push : { 成员 ： value} }
                    ex: db.stu.update ( {name : "张三" } , {$push : { "course " : ["体育"]  } } )  //往课程里面加课程如果没有数组就创建，如果有就添加
               $pushAll :追加多个内容
                     语法: { $pushAll : { 成员 ： 数组内容} }
                      ex: db.stu.update ( {name : "张三" } , {$push : { "course " : ["体育" , "美术"]  } } ) // 一次添加多个
               $addToSet: 向数组里面增加一个新的内容，只有不存在的时候添加  
                   语法 ： { $addToSet ： { 成员 : 内容}  }  //内容不能是数组  若是数组 就是添加数组了
                      ex: db.stu.update( { name : "王五" } , {$ addToSet : { course : "体育"  }  } )  //不存在体育则增加，存在则不管
                  $pop  : 删除数组的内容： 
                    语法:{  $pop:{成员 : 内容 } }    内容-1 删除第一个    1 删除最后一个
                      ex: db.stu.update( {name:"王五"} , { $pop : { course : -1  } } )
               $pull : 从数组内删除一个指定内容的数据
                   语法: { $pull : { 成员 ： 内容 }  }  //有就删除 没有就算了
                     ex: db.stu.update({name : "王五"} , { course : "音乐" }  )  
               $pullAll : 一次删除多个内容
                     语法: { $ pullAll : {成员 ： [ "数学" ，"语文" ] } }
                       ex: db.stu.update( {name : " 王五"}  ,{ $pullAll : { course : ["数学" ，"语文"] }  } )
                $rename : 为成员名称重命名
                     语法： { "$rename" : { 旧的成员名称 : 新的成员名称 }  }
                       ex: db.stu.update( { "name " : "张三" } ， {  $rename : { "name" : "姓名" }  } )
	3：删除数据
		db.stu.remove( { 条件} , 是否只删一个 )   // true/false 1/0 
		ex:   db.stu.remove( {} )//删除全部
		db.stu.remove ( {"name" : "王五"} , true )  //只删除一个
		db.stu.drop() //删除集合

	4：游标
		 游标就是指的数据可以一行一行的进行操作，只需用find()函数就可以返回游标
		 hasNext()  //判断是否有下一条数据
	         next();//读取一条数据
		  ex : var cursor=db.stu.find()
			cursor.hasNext();
			cursor.next();
			while(cursor.hasNext()){
				var doc=cursor.next();
				print(doc.name);    //控制台输出。。不是console
				printjson(doc);//用Json输出
			}

	5.索引
		查询默认情况下的索引
		     db.stu.getIndexes();
		自定义索引
			语法：db.集合名称.ensureIndex(  {列 : 1  }  )  //升序 -1 为降序
			  ex: db.stu.ensureIndex (   {age : -1}  )
		删除检索
		       db.news.dropIndexes();
		设置唯一索引
		    ex: db.stu.ensurIndex(  { "name" : 1 } , { "unqiue"  :  true} )  //name 字段上的内容不许重复  name：1 表示建立索引
			db.test.ensureIndex({"userid":1},{"unique":true,"dropDups":true})   //创建唯一索引，并消除重复数据。创建索引但是里面的数据就不能重复。
		设置过期索引
			对于文档应有time --存时间的字段
			db.phones.insert( {"tel":110,code:110,time : new Date() }  )
			ex:db.phones.ensureIndex( {time:1 } ,{  expireAfterSeconds : 10 } ) //设置文档10s后过期，但是时间不准，可以进行临时数据保存

		全文检索
		    设置全文检索
		     db.news.ensureIndex( {"title" : "text" , " content" : "text " } )   //text 就是设置字段的全文检索
		使用全文检索 “$text”  查询 "$search"
			 |--查询指定关键字  {$search : " 查询关键字"}
			 |--或的关系   { $search : "查询关键字 查询关键字 。。。" }
			 |--与的关系  { $search : " \"查询关键字\"  \"查询关键字\" ..."   }
			 |--排除某一个 {$search : " 查询关键字 查询关键字。。。 - 排除关键字"}
			ex: db.stu.find( "$text" : {$search : "查询关键子 查询关键字 "})
		一次设置所有为全文检索
		        db.news.ensureIndex( {"$**": "text" } )
		打分查询
			ex: db.stu.find( "$text" : {$search : "查询关键子 查询关键字 "},{score : {$meta : textScore }  } ) //分值越高越好
			db.stu.find( "$text" : {$search : "查询关键子 查询关键字 "},{score : {$meta : textScore }  } ).sort({score : {$meta : textScore }  }  )
	6:查看状态
		 db.stats()      //查看当前数据库的状态 ，显示出的数字的单位是字节，因此如果需要转换单位为KB需要除以1024
		 db.stats(1024);     //得到的是kb单位的
		 db.stats(1048576);  //得到的是mb单位的
		 db.stats(1073741824);  //得到的是gb单位的
		{
			"db" : "lj",    //当前数据库 
			"collections" : 2,  //当前数据库多少表 
			"views" : 0,
			"objects" : 13,     //当前数据库所有表多少条数据 
			"avgObjSize" : 52.38461538461539,   //每条数据的平均大小 
			"dataSize" : 681,    //所有数据的总大小 
			"storageSize" : 73728,  //所有数据占的磁盘大小
			"numExtents" : 0,
			"indexes" : 2,    //索引数
			"indexSize" : 73728,   //索引大小 
			"ok" : 1 
		}
		
		db.emp.stats();    //查看数据库表的状态
		db.collection.dataSize()  //collection中的数据大小
		db.collection.storageSize() //为collection分配的空间大小，包括未使用的空间
		db.collection.totalIndexSize()  //collection中索引数据大小
		db.collection.totalSize()  //collection中索引+data所占空间