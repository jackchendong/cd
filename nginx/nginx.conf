
# user nginx nginx;                            #启动Ngnix工作进程的用户和组
#user  nobody; 
#一般设置为CPU数 * 核数
worker_processes  1; 

#worker_cpu_affinity 0001 0010 0100 1000      #将Nginx工作进程绑定到指定的CPU核心，默认Nginx是不进行进程绑定的

#错误日志配置
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid文件保存路径
#pid        logs/nginx.pid;


#events设置块
#设置单个nginx工作进程可以接爱的最大并发连接数据；
#在nginx作为http服务器的时候，最大连接数为worker_processes * worker_connctions；在nginx作为反向代理服务器的时候，最大连接数为worker_processes * worker_connections / 2 
#use epoll;                      
#使用epoll事件驱动，Nginx支持众多的事件驱动，比如select、poll、epoll，只能设置在events模块中设置
#accept_mutex on;
#优化同一时刻只有一个请求而避免多个睡眠进程被唤醒的设置，on为防止被同时唤醒默认为off，全部唤醒的过程也成为"惊群"，因此nginx刚安装完以后要进行适当的优化
#multi_accept on;
#Nginx服务器的每个工作进程可以同时接受多个新的网络连接，但是需要在配置文件中配置，此指令默认为关闭，即默认为一个工作进程只能一次接受一个新的网络连接，打开后几个同时接受多个
events {                            
    worker_connections 1024;
}

# http 代理
http { 
    #导入支持的文件类型
    include       mime.types;
    #设置默认的类型，会提示下载不匹配的类型文件
    default_type  application/octet-stream;

    upstream core {
        server www.faceunity.com:80;
    }

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    #指定是否使用sendfile系统调用来传输文件
    sendfile        on;
    #在开启了sendfile的情况下，合并请求后统一发送给客户端
    #tcp_nopush     on;
    #在开启了keepalived模式下的连接是否启用TCP_NODELAY选项，当为off时，延迟0.2s发送，默认为on，不延迟发送，立即发送用户相应报文
    #tcp_nodelay off;                       
    #设置会话保持时间，单位是秒
    #keepalive_timeout  0;
    keepalive_timeout  65;

    # gzip  on;


    # 配置虚拟主机段
    server {
        # 服务端口
        listen       81;
        #设置server name，可以以空格隔开写多个，支持正则表达式，如 *.aaa.com，www.aaa.* ~^www\d+\.aaa\.com$ default_server
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location = /api {
            # 重定向
            return http://www.baidu.com;
            # return 600;
            # root   html;
            # index  index.html index.htm;
        }

        location = /favicon.ico {
            root /data/nginx/html/pc/images;
        }


        location /pta {
            root /usr/local/nginx/html/pc;
            index index.html;
            rewrite / http://www.aaa.com permanent;
            #rewrite / http://www.aaa.com redirect;

            #redirect；         #临时重定向，重写完成后以临时重定向方式直接返回重写后生成的新URL给客户端，由客户端重新发起请求；使用相对路径,或者http://或https://开头，状态码：302
            #permanent；        #重写完成后以永久重定向方式直接返回重写后生成的新URL给客户端，由客户端重新发起请求，状态码：301
            #last；             #重写完成后停止对当前URI在当前location中后续的其它重写操作，而后对新的URL启动新一轮重写检查，不建议在location中使用
            #break；            #重写完成后停止对当前URL在当前location中后续的其它重写操作，而后直接跳转至重写规则配置块之后的其它配置；结束循环，建议在location中使用
        }

        location = /user {
            # 代理
            proxy_pass http://www.faceunity.com;
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
            proxy_request_buffering off;
        }

        # 路由级别代理
        location /c/ {
            proxy_pass http://core/#/ind;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_buffering off;
            proxy_request_buffering off;
        }


        location / {
            #指定网站目录
            root   html;
            #指定默认网页文件，此指令由ngx_http_index_module模块提供
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {#以http的方式转发php请求到指定web服务器
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {  #以fastcgi的方式转发php请求到php处理
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {  #拒绝web形式访问指定文件，如很多的网站都是通过.htaccess文件来改变自己的重定向等功能。
        #    deny  all;
        #}
    }

    # 第二个服务
    server {
        # 服务端口
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }
    }
}

# HTTPS server
#
# server {                                #https服务器配置
#    listen       443 ssl;
#    server_name  localhost;

#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;

#    ssl_session_cache    shared:SSL:1m;
#    ssl_session_timeout  5m;

#    ssl_ciphers  HIGH:!aNULL:!MD5;
#    ssl_prefer_server_ciphers  on;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
# }

#include /usr/local/nginx/conf/conf.d/*.conf        #导入其他路径的配置文件

# tcp代理
stream {
    upstream search {
        server s-bp16831169b42cd4-pub.mongodb.rds.aliyuncs.com:3717;
    }
    server {
        listen 82;
        proxy_pass search;
    }
}